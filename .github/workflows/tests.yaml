name: Tests build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  DVC_TEST: "true"
  HOMEBREW_NO_AUTO_UPDATE: 1
  SHELL: /bin/bash
  GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GS_CREDS_JSON: ${{ secrets.GS_CREDS_JSON }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install requirements
      run: pip install ".[all,tests]" Pygments collective.checkdocs pre-commit
    - name: Check README
      run: python setup.py checkdocs
    - name: Check formatting
      run: pre-commit run --all-files
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        pyv: ["3.6", "3.7", "3.8", "3.9"]
    steps:
    - uses: actions/checkout@v2.3.2
    - name: Set up Python
      uses: actions/setup-python@v2.1.2
      with:
        python-version: ${{ matrix.pyv }}
    - name: install
      run: |
        pip install wheel
        pip install -e ".[all,tests]"
    - name: setup git
      run: |
        git config --global user.email "dvctester@example.com"
        git config --global user.name "DVC Tester"
    - name: setup gs creds
      shell: bash
      if: env.GS_CREDS_JSON != ''
      run: |
        mkdir -p scripts/ci
        echo "$GS_CREDS_JSON" > scripts/ci/gcp-creds.json
    - name: run tests
      run: python -m tests -ra --cov-report=xml --cov-report=term --tap-combined
    - name: upload coverage report
      uses: codecov/codecov-action@v1.0.13
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    - name: Post TAP
      # Running custom fork with an option, that does not fail CI on error
      uses: skshetry/flaky-service/packages/action@master
      if: ${{ always() }}
      with:
        file-path: ${{github.workspace}}/testresults.tap
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        os: ${{runner.os}}
        matrix: ${{toJson(matrix)}}
        repo-description: ${{github.event.repository.description}}
        fail_ci_if_error: false
